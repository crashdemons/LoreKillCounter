/*
 *  This Source Code Form is subject to the terms of the Mozilla Public
 *  License, v. 2.0. If a copy of the MPL was not distributed with this
 *  file, You can obtain one at http://mozilla.org/MPL/2.0/ .
 */
package com.github.crashdemons.lorekillcounter.counters;

import com.github.crashdemons.lorekillcounter.LoreKillCounter;
import java.text.MessageFormat;
import java.util.Objects;
import org.bukkit.entity.EntityType;
import org.jetbrains.annotations.Nullable;

/**
 *
 * @author crashdemons (crashenator at gmail.com)
 */
public class CounterType {
    public final CounterBaseType baseType;
    public final String extendedData;
    
    public CounterType(CounterBaseType type){
        this.baseType=type;
        this.extendedData="";
    }
    
    public CounterType(CounterBaseType type, String extendedData){
        this.baseType=type;
        this.extendedData=extendedData;
    }
    
    
    protected static String capitalizeString(String string) {
        char[] chars = string.toLowerCase().toCharArray();
        boolean found = false;
        for (int i = 0; i < chars.length; i++) {
          if (!found && Character.isLetter(chars[i])) {
            chars[i] = Character.toUpperCase(chars[i]);
            found = true;
          } else if (Character.isWhitespace(chars[i]) || chars[i]=='.' || chars[i]=='\'') { // You can add other chars here
            found = false;
          }
        }
        return String.valueOf(chars);
    }
    
    protected static String getFriendlyEntityName(EntityType type){
        String name = type.name().replace('_', ' ');
        return capitalizeString(name);
    }
    
    protected static String formatDisplayName(CounterBaseType baseType, String extendedData){
        try{
            if(!baseType.isExtended()) return baseType.getDisplayName();
            return MessageFormat.format(baseType.getDisplayName(), extendedData);
        }catch(Exception e){
            System.out.println("***baseType "+(baseType==null?"null":baseType));
            System.out.println("***extended "+(extendedData==null?"null":extendedData));
            System.out.println("***dispName "+(baseType==null?"NPE":baseType.getDisplayName()));
            throw e;
        }
    }
    
    public String getDisplayName(){
        //System.out.println("***"+this.getClass().getSimpleName());
        return formatDisplayName(baseType, extendedData);
    }
    
    @Nullable
    public static CounterType fromDisplayName(String displayName){
        return new CounterType(CounterBaseType.fromDisplayName(displayName));
    }
    
    
    @Override
    public boolean equals(Object other){
        if(!(other instanceof CounterType)) return false;
        if(other==this) return true;
        if(other==null) return false;
        CounterType otherType = (CounterType) other;
        return (this.baseType==otherType.baseType && this.extendedData.equals(otherType.extendedData));
    }

    @Override
    public int hashCode() {//generated by netbeans
        int hash = 5;
        hash = 79 * hash + Objects.hashCode(this.baseType);
        hash = 79 * hash + Objects.hashCode(this.extendedData);
        return hash;
    }

    
}
